
# 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k
#  ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请 
# 
#  你返回所有和为 0 且不重复的三元组。 
# 
#  注意：答案中不可以包含重复的三元组。 
# 
#  
# 
#  
# 
#  示例 1： 
# 
#  
# 输入：nums = [-1,0,1,2,-1,-4]
# 输出：[[-1,-1,2],[-1,0,1]]
# 解释：
# nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
# nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
# nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
# 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
# 注意，输出的顺序和三元组的顺序并不重要。
#  
# 
#  示例 2： 
# 
#  
# 输入：nums = [0,1,1]
# 输出：[]
# 解释：唯一可能的三元组和不为 0 。
#  
# 
#  示例 3： 
# 
#  
# 输入：nums = [0,0,0]
# 输出：[[0,0,0]]
# 解释：唯一可能的三元组和为 0 。
#  
# 
#  
# 
#  提示： 
# 
#  
#  3 <= nums.length <= 3000 
#  -105 <= nums[i] <= 105 
#  
#  Related Topics 数组 双指针 排序 
#  👍 5251 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def threeSum(self, nums):
        if len(nums) <= 3 and sum(nums) != 0:
            return []
        nums.sort()
        output = []
        for i in range(len(nums) - 2):
            left = i + 1
            right = len(nums) - 1

            while left < right:
                if nums[i] + nums[left] + nums[right] == 0:
                    if [nums[i], nums[left], nums[right]] not in output:
                        output.append([nums[i], nums[left], nums[right]])
                        break
                elif nums[i] + nums[left] + nums[right] > 0:
                    right -= 1
                else:
                    left += 1
        return output



# leetcode submit region end(Prohibit modification and deletion)


nums = [-1, 0, 1, 2, -1, -4]
nums = [0, 0, 0]
s = Solution()
print(s.threeSum(nums))



只适合nums很短的情况，否则2 ** len(nums)太大

class Solution(object):
    def threeSum(self, nums):
        if len(nums) <= 3 and sum(nums) != 0:
            return []
        all_nums = []
        for i in range(1, 2 ** (len(nums))):
            st_bin = format(i,
                            f'0{len(nums)}b')  # 转化成定长的二进制字符,二进制字符为1的
            # 位置代表取数，通过这种方法可以拿到所有数的组合
            one_nums = []
            if st_bin.count('1') != 3:  # 忽略非三个数字的组合
                continue
            for index in range(len(st_bin)):  # 从所有组合里拿只包含三个数字的组合
                if st_bin[index] == '1':
                    one_nums.append(nums[index])
            if sum(one_nums) != 0:  # 忽略和不为0的组合
                continue
            one_nums.sort()  # 排序完方便去重
            if one_nums not in all_nums:
                all_nums.append(one_nums)
        return all_nums


nums = [-1, 0, 1, 2, -1, -4]
nums = [0, 1, 1]
nums = [0, 0, 0]
s = Solution()
print(s.threeSum(nums))
