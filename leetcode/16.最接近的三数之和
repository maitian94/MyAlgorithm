# 给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。 
# 
#  返回这三个数的和。 
# 
#  假定每组输入只存在恰好一个解。 
# 
#  
# 
#  示例 1： 
# 
#  
# 输入：nums = [-1,2,1,-4], target = 1
# 输出：2
# 解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。
#  
# 
#  示例 2： 
# 
#  
# 输入：nums = [0,0,0], target = 1
# 输出：0
#  
# 
#  
# 
#  提示： 
# 
#  
#  3 <= nums.length <= 1000 
#  -1000 <= nums[i] <= 1000 
#  -104 <= target <= 104 
#  
#  Related Topics 数组 双指针 排序 
#  👍 1253 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def threeSumClosest(self, nums, target):
        nums.sort()
        global_min_num = nums[0] + nums[1] + nums[len(nums) - 1]
        for i in range(len(nums) - 2):
            if i > 0 and nums[i] == nums[i-1]: # 有数字重复的情况下，直接跳过这个数
                continue
            left = i + 1
            right = len(nums) - 1
            while left < right:
                temp_min = nums[i] + nums[left] + nums[right]
                if abs(temp_min - target) < abs(global_min_num - target):
                    global_min_num = temp_min
                elif temp_min == target:
                    return target
                elif temp_min > target:
                    right -= 1
                else:  # temp_min < target:
                    left += 1

        return global_min_num
# leetcode submit region end(Prohibit modification and deletion)


nums = [-1, 2, 1, -4]
target = 1
s = Solution()
print(s.threeSumClosest(nums, target))
